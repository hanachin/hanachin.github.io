---
layout: post
title:  "たんたん"
date:   2014-03-26 07:32:06
categories: diary
---
# たんたん
たんたんとこなしていきたい

## 昨日atomに出したPullRequestマージされてた
- [Add recognition for .ruby template handler by hanachin · Pull Request #22 · atom/language-ruby](https://github.com/atom/language-ruby/pull/22)

thanksされるの気持ちいいな。

そのあと、追加位置がまずってたみたいで、[sortされてるコミット](https://github.com/atom/language-ruby/commit/af026af391f630d9f1980b55d42b705ba2987fc0)があった。勉強になる。次から気をつけたい。

## マージした
- [fix typo by bash0C7 · Pull Request #48 · okinawarb/rubima](https://github.com/okinawarb/rubima/pull/48)

名前typoしてた。`:bow:`土下座でthx書いた。

## Jekyll
### 残念なきもち
Jekyllで、`chapter`みたいなの付けて、その`chapter`でソートして`for in`で回すみたいなのやりたかったけど断念。
おっちゃんはすなおに手書きすることにするよ...

### 本を書くためのフォーマット
- [review/doc/format.rdoc at master · kmuto/review](https://github.com/kmuto/review/blob/master/doc/format.rdoc)

Markdownにたりなさそうなのは

- コラム
- 用語リスト
- ソースコードなどのリスト
- ソースコード専用の引用
- 行番号付き連番ありリスト
- 行番号付き連番なしリスト
- コマンドラインのキャプチャ
- 番号がふられた図
- グラフ表現ツールを使った図
- リード文
- 豊富なインライン命令

あたりか

## Qiita::Team
ようやく使いはじめた。
全然資料かいてなかったんだけど「とりえあずQiitaに書けばいい」があるので便利だ。

とあるアプリ、いままで、僕しか触らんしなと思って書いてなかった部分はある。
もうひとり触る人が出来たし、聞かれて答えるのもめんどくさいから作業したら全部かいとこ...

インフラ周りとかだいぶカオスになってるんだけど、それは、まぁ、見なかったことにして時間のあるときだな.

## 読んだ記事
[おごちゃん : 遠隔操作裁判に行って来た : SHORTPLUG.JP](https://www.shortplug.jp/profile/ogochan/diaries/3386)

> 自分の無実を証明するためには、自分が「無能」であることを主張しなきゃいけない。

読んでるだけでも想像してしまってだいぶつらかった。無能アピールしたあと同じ職種に復帰するの、自分だと心折れそうで無理。


[7. RRRSpecについて補足 - 進捗メモ](http://draftcode.osak.jp/articles/7.html)

いい話だった

## 書いたコードすべての行に意味がある
`@`つけるのだるくて`attr_accessor`使ったんだけど`writer`使わないしそもそもそのインスタンス変数外部に公開するべきではない、みたいなことありませんか。

今日やりました。1行1行すべてのコードに意味があるんですよね、アクセッサ必要ない場合は書くな!!!! (自戒)

## 今日
朝はやくから活動したせいか不機嫌。
仕事はそれなりにコード書いたしコメントも書いた。
趣味のコードを書いてない気がする。

今から運動してシャワー浴びて寝ようと思う。
ブログかくよりブログツール書いたり試すのが楽しいのと同じ現象が起きそうでMiddleman試したくなっている。

## RailsのTemplate
Controllerから`render`がよばれたときどうなっているか

1. `ActionView::Renderer#render`がよばれる→[Main render entry point shared by AV and AC.](https://github.com/rails/rails/blob/4-0-stable/actionpack/lib/action_view/renderer/renderer.rb#L18)
2. `patial`は考えない。`Renderer::render_template`がよばれ、`TemplateRenderer`に`lookup_context`が渡され、`render`が呼ばれる[ここ](https://github.com/rails/rails/blob/4-0-stable/actionpack/lib/action_view/renderer/renderer.rb#L42)
3. `TemplateRenderer`は引数の`lookup_context`の`LookupContext#find_template`をよびだしテンプレートさがしてくる。1つ上の抽象クラスが[lookup_contextにdelegateしてる](https://github.com/rails/rails/blob/4-0-stable/actionpack/lib/action_view/renderer/abstract_renderer.rb#L18)
4. `lookup_context`は、`view_paths`からテンプレートをさがしてくる。`view_paths`はたぶん、`app/views/`とかそこらへん。クラスは`ActionView::PathSet`。[LookupContextこれ](https://github.com/rails/rails/blob/4-0-stable/actionpack/lib/action_view/lookup_context.rb)
5. `view_paths`は、[resolverをつかってテンプレートを探してくる](https://github.com/rails/rails/blob/4-0-stable/actionpack/lib/action_view/path_set.rb#L53)
6. `Resolver`では`find_all`、`find_templates`ときて最終的に[ここらへん](https://github.com/rails/rails/blob/4-0-stable/actionpack/lib/action_view/template/resolver.rb#L175-L217)で`Dir#[]`をつかってみつけたファイルを`Template`クラスにして返す感じ

`render`はどこでよばれるかとRuby on Rails hacking guideのcontrollerのところのそれをとおって、明示的にかいてなかったら[ここらへんで暗黙的によばれる](https://github.com/rails/rails/blob/4-0-stable/actionpack/lib/action_controller/metal/implicit_render.rb)っぽい
